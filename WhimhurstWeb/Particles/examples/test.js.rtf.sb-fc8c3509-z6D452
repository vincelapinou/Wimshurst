{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 "use strict";\
\
function generateSpark(sceneThreeJs) \{\
	var particleSystem = new THREE.GPUParticleSystem( \{\
				maxParticles: 10000\
			\} );\
	sceneThreeJs.add(particleSystem);\
	var options = \{\
				position: new THREE.Vector3(),\
				positionRandomness: .3,\
				velocity: new THREE.Vector3(),\
				velocityRandomness: .5,\
				color: 0xaa88ff,\
				colorRandomness: .2,\
				turbulence: .5,\
				lifetime: 1,\
				size: 5,\
				sizeRandomness: 1\
			\};\
\
		var spawnerOptions = \{\
				spawnRate: 500000,\
				horizontalSpeed: 0.1,\
				verticalSpeed: 0,\
				timeScale: 0.5\
			\};\
		var delta = clock.getDelta() * spawnerOptions.timeScale;\
\
			tick += delta;\
\
			\
\
			if ( delta > 0 && options.position.x<=2) \{\
\
				options.position.x = tick * spawnerOptions.horizontalSpeed*300-2;\
				options.position.y = 0;\
				options.position.z = 5;\
\
				for ( var x = 0; x < spawnerOptions.spawnRate * delta; x ++ ) \{\
\
					// Yep, that's really it.	Spawning particles is super cheap, and once you spawn them, the rest of\
					// their lifecycle is handled entirely on the GPU, driven by a time uniform updated below\
\
					particleSystem.spawnParticle( options );\
\
				\}\
\
			\}\
\
			particleSystem.update( tick );\
	\
\
\}}